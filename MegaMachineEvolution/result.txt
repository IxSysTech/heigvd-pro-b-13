State : 0 : 
0 -> 3
1 -> 10
2 -> 15
3 -> 4
4 -> 15
State action ID is : 0
---------------------------------------
State : 1 : 
0 -> 13
1 -> 15
2 -> 3
3 -> 7
4 -> 3
State action ID is : 0
---------------------------------------
State : 2 : 
0 -> 8
1 -> 14
2 -> 13
3 -> 2
4 -> 4
State action ID is : 0
---------------------------------------
State : 3 : 
0 -> 13
1 -> 14
2 -> 5
3 -> 8
4 -> 13
State action ID is : 0
---------------------------------------
State : 4 : 
0 -> 9
1 -> 4
2 -> 11
3 -> 11
4 -> 2
State action ID is : 2
---------------------------------------
State : 5 : 
0 -> 3
1 -> 4
2 -> 4
3 -> 7
4 -> 5
State action ID is : 0
---------------------------------------
State : 6 : 
0 -> 15
1 -> 1
2 -> 5
3 -> 3
4 -> 5
State action ID is : 0
---------------------------------------
State : 7 : 
0 -> 8
1 -> 2
2 -> 9
3 -> 13
4 -> 12
State action ID is : 0
---------------------------------------
State : 8 : 
0 -> 1
1 -> 7
2 -> 10
3 -> 5
4 -> 8
State action ID is : 0
---------------------------------------
State : 9 : 
0 -> 7
1 -> 12
2 -> 1
3 -> 10
4 -> 4
State action ID is : 1
---------------------------------------
State : 10 : 
0 -> 9
1 -> 8
2 -> 4
3 -> 6
4 -> 9
State action ID is : 0
---------------------------------------
State : 11 : 
0 -> 10
1 -> 3
2 -> 10
3 -> 4
4 -> 14
State action ID is : 2
---------------------------------------
State : 12 : 
0 -> 4
1 -> 9
2 -> 0
3 -> 13
4 -> 10
State action ID is : 0
---------------------------------------
State : 13 : 
0 -> 12
1 -> 10
2 -> 8
3 -> 2
4 -> 10
State action ID is : 1
---------------------------------------
State : 14 : 
0 -> 8
1 -> 5
2 -> 11
3 -> 2
4 -> 15
State action ID is : 1
---------------------------------------
State : 15 : 
0 -> 10
1 -> 11
2 -> 13
3 -> 3
4 -> 2
State action ID is : 0
---------------------------------------
Entered state : 0 for machine 0
Entered state : 3 for machine 0
Entered state : 14 for machine 0
Entered state : 11 for machine 0
Entered state : 10 for machine 0
Entered state : 8 for machine 0
Entered state : 1 for machine 0
Entered state : 13 for machine 0
A Machine has stop ! Result is : yes -> 1 and no -> 2
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 3 for machine 0
Entered state : 14 for machine 0
Entered state : 11 for machine 0
Entered state : 4 for machine 0
A Machine has stop ! Result is : yes -> 2 and no -> 1
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 3 for machine 0
Entered state : 14 for machine 0
Entered state : 11 for machine 0
Entered state : 4 for machine 0
A Machine has stop ! Result is : yes -> 2 and no -> 1
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 3 for machine 0
Entered state : 14 for machine 0
Entered state : 2 for machine 0
Entered state : 8 for machine 0
Entered state : 10 for machine 0
Entered state : 9 for machine 0
A Machine has stop ! Result is : yes -> 0 and no -> 2
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 3 for machine 0
Entered state : 14 for machine 0
Entered state : 2 for machine 0
Entered state : 13 for machine 0
A Machine has stop ! Result is : yes -> 0 and no -> 2
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 3 for machine 0
Entered state : 5 for machine 0
Entered state : 7 for machine 0
Entered state : 8 for machine 0
Entered state : 5 for machine 0
Entered state : 4 for machine 0
Entered state : 11 for machine 0
A Machine has stop ! Result is : yes -> 2 and no -> 0
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 3 for machine 0
Entered state : 8 for machine 0
Entered state : 10 for machine 0
Entered state : 8 for machine 0
Entered state : 1 for machine 0
Entered state : 13 for machine 0
Entered state : 12 for machine 0
Entered state : 10 for machine 0
Entered state : 9 for machine 0
A Machine has stop ! Result is : yes -> 0 and no -> 2
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 3 for machine 0
Entered state : 8 for machine 0
Entered state : 10 for machine 0
Entered state : 8 for machine 0
Entered state : 7 for machine 0
Entered state : 13 for machine 0
Entered state : 10 for machine 0
Entered state : 8 for machine 0
Entered state : 10 for machine 0
Entered state : 8 for machine 0
Entered state : 5 for machine 0
Entered state : 4 for machine 0
Entered state : 11 for machine 0
A Machine has stop ! Result is : yes -> 2 and no -> 1
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 3 for machine 0
Entered state : 8 for machine 0
Entered state : 10 for machine 0
Entered state : 9 for machine 0
Entered state : 7 for machine 0
Entered state : 13 for machine 0
A Machine has stop ! Result is : yes -> 0 and no -> 2
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 3 for machine 0
Entered state : 8 for machine 0
Entered state : 5 for machine 0
Entered state : 7 for machine 0
Entered state : 2 for machine 0
Entered state : 8 for machine 0
Entered state : 10 for machine 0
Entered state : 9 for machine 0
Entered state : 10 for machine 0
Entered state : 9 for machine 0
A Machine has stop ! Result is : yes -> 0 and no -> 2
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 15 for machine 0
Entered state : 11 for machine 0
Entered state : 10 for machine 0
Entered state : 6 for machine 0
Entered state : 5 for machine 0
Entered state : 7 for machine 0
Entered state : 8 for machine 0
Entered state : 7 for machine 0
Entered state : 2 for machine 0
Entered state : 8 for machine 0
Entered state : 7 for machine 0
Entered state : 13 for machine 0
Entered state : 8 for machine 0
Entered state : 7 for machine 0
Entered state : 13 for machine 0
A Machine has stop ! Result is : yes -> 1 and no -> 2
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 15 for machine 0
Entered state : 13 for machine 0
Entered state : 12 for machine 0
Entered state : 4 for machine 0
Entered state : 11 for machine 0
A Machine has stop ! Result is : yes -> 2 and no -> 1
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetEntered state : 15 for machine 0
Entered state : 13 for machine 0
Entered state : 12 for machine 0
Entered state : 0 for machine 0
Entered state : 15 for machine 0
Entered state : 3 for machine 0
Entered state : 8 for machine 0
Entered state : 5 for machine 0
Entered state : 4 for machine 0
Entered state : 11 for machine 0
A Machine has stop ! Result is : yes -> 2 and no -> 1
One of my machine has stop, we should disconnect events for the machine : 0
Resetting the machines for next sequence ...Entered state : 0 for machine 0
Machine is running : 1resetScore : 13 for machine : 0


Avec les séquences :

sequences.insert(std::pair<std::string, bool>("ACGT", true));
    sequences.insert(std::pair<std::string, bool>("ACGGCAAAXXXAC", false));
    sequences.insert(std::pair<std::string, bool>("ATGXATGATTTTAAAGTACATTAAAGAAATTATTTTCCCCTCCATGACAGTGCTTGGCACTCTGGGAAACATGTTTGTTTTTGTGAATTATATGTTCAGTTGGTGGGGAAGCCCTGAGAAGAAACCCATACACCTCATTCTCATCCACTTGGCTTTTACAAACATCATAATCCTTCTTACAAAAGGATTGCAAAAGACAATAGCAGCTTTTGGTTTGAGAAACTTCCTGGATGACATAGGCTGTAAGAGCATTGTCTACCTGGAAAGGGTATCCCGTGGCCTCTCCATCTGTACCAGCAGTCTCCTCACTGTGGTCCAGGCCATCACCATCAGTCCCAGAGCATCTGGATGGAGGAGGCTCAGGACAAAGTCTGCATGGCACATCCTTCCATTCTTGCTATTCTTTTGGATACTCAATGGTTTAATAAGTATGAACCTAATCCATTCCATCACAGGTACAGGTTTTAATATATCACAGCTTGAGAATAGAGACAGCTATTGCTATTTTATGCTAGAAAGTCAGGAAATAAAATGGATTGTTCTCCCTCTCATGGTCATGAGAGATGCAGTGTTTCAGAGTGCCCTGGGAGGGGCCAGTGGCTACATGATATTTCTTCTCCACAAGCACCACCAGCATGTCCTCTACCTTCAGAATTCCAAGCTTCTCTACAGAACTCCCCCTGAGCTGAGAGCTGCCCAGAGTGTCCTCCTTCTGATGCTCTGTTTTGCTTTCTTCTACTGGACAGATTGTGCGTTTTCTCTAATTTTAAGTCTCTCTTCAAGGGACAAAACCTTGATGGTAAATACTCAAGAATTTCTGGCCCTTGGTTATGCAACTTTTAGCCCTTTTGTGCTGATTCACAGGGATGGGCTTCTGGTTGATTGGTGGCATGCTCAGATGGAGAAATTGAGAAAATGTTACTCTCGTTTATATGTGCAATAG", false));
    sequences.insert(std::pair<std::string, bool>("GCGTGTACCACTGCTCCCCTCCCGTTCAAAGGCGACAAGATCATTTGCCAAAAGGAGGAGGAGGCAAAGGAAGCAACAGGTCTACATGTTCATGAACGGAAGATTGAGGTCATGGAGAATCCTTCCTGTCGGCGAGGAACCACAAACACCAGCAACGGGGATACAAGTGAGAGTGAACTCCAGGTGGGAAGTCTTTTAAATGGGAGAAAGTATAGTGACTCAAGTCTACCTCCTTCAAACTCAGGGAAACTTCAGAGTGAGACGAGCCAGTGCTCACTAATCAGCAATGGGCCATCGTTGGAACTAGGTGAGAATGGAGCGCCTGGAAAACAGAACTCAGAACCAGTAGACATGCAGGATGTCAAAGGTGATCTGAAAAAAGCCCTCGTCAATGGAATCTGTGATTTTGATAAAGGAGATGGTTCTCATTTAAGCAAAAACATTCCAAATCACAAAACTTCTAATCATGTAGGAAATGGTGAGATATCTCCAGTAGAACCACAAGGGACTTCGGGTGCCACTCAGCAAGATACTGCCAAAGGTGACCAACTAGAAAGAGTTTCTAATGGACCTGTGTTAACTCTGGGTGGGTCACCGTCCACAAGCAGTATGCAAGAAGCCCCGAGTGTGGCGACACCGCCGTTGAGTGGTACTGACCTGCCTAACGGACCTCTAGCTTCAAGTTTGAATTCAGATGTGCCTCAGCAACGCCCAAGTGTAGTTGTCTCACCACATTCTACAGCCCCTGTCATACAGGGGCATCAAGTCATAGCAGTTCCCCACTCAGGACCTAGAGTGACCCCTTCTGCTCTATCATCTGATGCTCGGTCTACAAACGGCACAGCCGAGTGCAAAACTGTAAAGAGGCCGGCAGAGGATAATGATAGGGACACTGTCCCGGGAATCCCAAATAAAGTAGGGGTTAGAATTGTTACAATCAGCGACCCCAACAATGCTGGCTGCAGTGCAACCATGGTTGCGGTCCCAGCTGGAGCGGACCCAAGCACTGTAGCGAAAGTAGCAATAGAAAGTGCTGCTCAGCAAAAGCAGCAGCATCCACCGACCTACATGCAGAGTGTGGCCCCACAGAACACTCCTATGCCACCTTCACCAGCTGTACAAGTGCAGGGCCAGCCTAGCAGTTCTCAGCCTTCTCCAGTCAGTGCGTCCAGTCAGCATGCAGATCCAGTGAGAAAACCTGGGCAGAACTTCATGTGTCTGTGGCAGTCTTGTAAAAAGTGGTTTCAGACTCCCTCACAAGTGTTCTATCATGCAGCTACTGAACATGGAGGAAAAGATGTGTATCCGGGGCAGTGTCTTTGGGAAGGCTGTGAGCCTTTCCAACGGCAGAGGTTCTCTTTCATTACCCACTTACAGGATAAGCACTGTTCAAAGGATGCCCTGCTTGCAGGATTAAAGCAAGATGAACCAGGACAAGTGGCAAATCAAAAATCTTCTACCAAGCAGCCCACCGTGGGGGGCACAGGCTCTGCGCCCAGAGCCCAGAAGGCCATTGCAAGCCACCCCAGTGCTGCACTCATGGCTCTGCGGAGAGGCTCAAGGAACCTCGTCTTCCGGGACTTCACAGATGAAAAAGAGGGACCAATAACTAAACACATCCGACTAACAGCTGCCTTAATATTAAAAAATATTGGTAAATACTCAGAGTGTGGGCGCAGATTGTTAAAGAGACATGAAAACAACTTATCAGTGCTCGCCATTAGTAACATGGAAGCTTCCTCTACCCTTGCCAAATGCCTTTATGAACTTAATTTTACAGTTCAGAGTAAAGAACAAGAAAAAGACTCAGAAATGCTGTAGTGAATCCTACCCCACTGACACAGTGGGGTCTCAAAGTCAAATACATTTCACATACTGTTACTGAAGAAAGCACCAAGTCTTAATGGAGCAGAGACCATAGAATGAATTATTTTGTGTCCTCCATGATGCTGAGAGGAAACTTCGTATTCTGATCTCTGAACGAATCCCTTTCTTTTCTGCT", false));
    sequences.insert(std::pair<std::string, bool>("AGTATGGACGTTCTGCTTGAGATTTCAAGAATTTTGAATACCAGCTTAGATATGGAAACGCTGTCTATTTGTGTACGGCTTTGTGAACAAGGAATCAACCCAGAAACCTTATCATCTGTTATTAAGGAGCTTCGCAAGGGTACTGAAGCACTAAAGGCTGCTGAAAACACAAGCTGA", true));
    sequences.insert(std::pair<std::string, bool>("GGAAGGACCTCTCCAGAGAATCCAGATTGCTCCTAGGGAGGCTCCAAACCTCCATTTGACAATGGGAAACTGGCTGGTTAACCACTGGCTCTCAGTTTTGTTTCTGGTTTCCTGGTTGGGGCTGAACATTTTTCTGTTTGTGTATGCCTTCCTGAATTATGAGAAGTCTGACAAGTACTATTACACGAGAGAAATTCTTGGGACTGCCTTGGCCTTGGCCAGAGCATCTGCTCTGTGCTTGAATTTTAACAGCATGATGATCCTGATTCCTGTGTGTCGAAATCTGCTGTCCTTCTTGAGGGGCACCTGCTCATTTTGCAACCGTACACTGAGAAAGCCATTGGATCACAACCTCACCTTCCATAAGCTGGTGGCATATATGATCTGCATATTCACAGTTATTCATATCATTGCACACCTATTTAACTTCGAACGCTACAGAAGAAGCCAACAGGCCATGGATGGATCTCTCGCTTCTGTTCTCTCCAGCCTATCTCATCCTGAGAAAGAAGATTCTTGGCTAAATCCCATCCAGTCTCCAAACATGACAGTGATGTATGCAGCATTTACCAGTATTGCTGGCCTTACTGGAGTGATTGCCACTGTAGCTTTGGTTCTCATGGTAACGTCAGCTATGGAGTTTATCCGCAGGAATTATTTTGAGCTCTTTTGGTATACACATCACCTTTTTATCGTCTATATCATCTGCTTAGGGATCCATGGCCTGGGTGGGATTGTCCGGGGTCAAACAGAGGAGAGCTTGGGTGAAAGCCATCCTCACAATTGTTCCCATTCTTTTCACGAGTGGGATGACCATAAGGGGAGTTGCAGGCATCCTCATTTTGCGGGGCACCCCCCTGAGTCTTGGAAGTGGATCCTTGCACCGATTGCTTTTTATATATTTGAAAGGATCCTTCGCTTTTATCGCTCCCAGCAGAAGGTCGTGATTACCAAGGTTGTCATGCACCCATCTAATGTTTTGGAATTGCAGATGAGGAAGCGAGGCTTTAGCATGGAAGTAGGACAGTATATATTTGTAAATTGCCCCTCCATTTCCTTCCTGGAGTGGCATCCCTTCACTCTGACTTCTGCTCCAGAGGAAGAATTTTTCTCCGTTCATATTCGAGCAGCAGGGGACTGGACACGAAATCTCATAAGGACATTTGAACAACAGCACTCACCAATGCCCAGGATCGAGGTGGACGGTCCCTTTGGCACAGTCAGTGAGGATGTTTTCCAGTATGAAGTGGCTGTACTGGTTGGGGCAGGGATTGGGGTCACTCCCTTTGCTTCCATCTTGAAATCTATCTGGTACAAATTCCAGCGTGCCGACAACAAGCTCAAAACACAAAAGATCTATTTCTACTGGATCTGTAGAGAGACAGGTGCCTTTGCCTGGTTCAACAACTTATTGAATTCCCTGGAACAAGAGATGGAGGAATTAGGCAAAATGGATTTTCTAAACTACCGTCTCTTCCTCACTGGCTGGGATAGCAACATTGCTGGTCATGCAGCATTAAACTTTGACAGAGCCACTGACATCCTGACAGGTCTGAAGCAGAAAACTTCCTTTGGGAGACCAATGTGGGACAATGAGTTTTCTAGAATAGCTACTGCCCACCCCAAGTCTGCGGTGGGGGTTTTCTTATGTGGCCCTCGGACTTTGGCAAAAAGCCTGCGCAAACGCTGTCAGCGATACTCGAGTCTGGATCCTAGGAAGGTTCAGTTCTACTTCAACAAAGAAACGTTCTGACTTGGAGGAAGCAGCACAGCTTCCACACTTTCCTTTGCTCTTCACTAACTTGGGGGTCAGTTACTAGATAACCCTTTGCCTCACAAGGCCTTCCCTCCCAACTTCAAGTTTGATCATACATGGGCTTGGCCGACCTGAGAGCTGCATAATTCACAAGTGCAAAACACATGAATTGGTTTTTATTGGGGGGGGGGGGGGCTGTAAATCCTGGGAACCTGCCTTTAGCTGAATTTTGCTGGCTGACACTTGCACAATTTAACATCAGGTGTCTTGCTTGATAATCTTCCCTCCCACTTGTCCCTCACAAAAGATTTCTAAGTAGGGTGACTTTTAAAATATTTATTGAATCCACGACAGAACAACAATCATAAATAAACAACATAGAACGACCAAGCTTCCCACTCCCATATCACCCACTAAGTACATTGTTACATGAGTTAATCCAGTGTGACCAACAATTTACACGTTACTTTGTCAAAATAATTGACTTTCCTTTTTGCTTATTGAACAATTTCCTAGTAATATCTTAAGTATATTAACTGTAATCAAATTTGTACTATAGTTAGAAGCCAACTATATTGTCACTTTGTATTGTTTGGAATAACTGGAAAGGCCTGACGC", true));
    sequences.insert(std::pair<std::string, bool>("ATGCCTCCGCTCTGGGCCCTGCTGGCTCTCGGATGCCTGCGGTGTGGCTGGACTGTGAACCTCCAGCCCCAACTGGCCAGTGTGACCTTTGCCACCAACAATCCTACCCTCACCACCGTGGCCTTGGAGAAGCCTCTGTGCATGTTCGATAGCTCAGAGCCACTCAGCGGCTCTTACGAGGTTTACCTCTATGCTATGGTCGACTCAGCCATGTCCAGGAATGTGTCTGTACAGGACAGCGCTGGCGTCCCACTGAGCACTACTTTCCGGCAAACCCAGGGTGGGAGGTCAGGCCCCTATAAAGCTGCGGCCTTTGACCTGACCCCTTGTGGTGACTTGCCCAGCCTGGATGCTGTTGGAGATGTGACCCAGGCCTCAGAGATCCTGAACGCATACCTAGTCAGGGTGGGCAACAACGGGACCTGTTTTTGGGACCCCAACTTCCAGGGCCTCTGCAACCCACCCCTGACGGCGGCCACTGAGTACAGATTCAAATATGTCCTGGTCAACATGTCCACAGGCTTGGTGCAGGACCAGACACTATGGTCAGATCCCATCCGGACCAACCGGCCCATCCCCTACTTGGCCATCGACACGTGGCCCGGCCGGCGGAGTGGAGGCATGATTGTCATCACGTCCATTCTGGGCTCCCTGCCCTTCTTCCTGCTCGTGGGTTTCGCTGGAGCCATCATCCTCAGCTTTGTGGACATGGGCAGTTCTGATGGGGAAATGACACACGACTCACAGATCACCCAGGAGGCTGTCCCCAAGACCCTGGGGACTTCTGAGCCTTCCTACTCATCTGTGAACCGGGGCCCACCCCTAGACAGAGCAGAGGTGTTCTCCAGCAAGCTTCAAGACTGAAACAACCCAAGCCCCGGCACCAACCCATGGCCACTTTTCAACTTGGCCCTGTGGTTGGCAGTGATGGTGTTTATGCTCTGACTGGACCAGATGTGAAACATGACATCTTGGTCCAACCTCATGAAAAAGCTAAATAA", true));
    sequences.insert(std::pair<std::string, bool>("GGAGGTTTCTGACTGGAGAAATGGCCACTCTCTGTCTCTTCGACATGGATGGGACCCTGACTGCCCCGCGGCAGAAAATTACAGAAGAAATGGATGGCTTTCTACAAAAATTGAGGCAGAAGACCAAAATTGGAGTGGTAGGTGGGTCAGATTTTGAGAAACTGCAAGAGCAACTGGGAAATGATGTGGTTGAGAAATACGATTATGTGTTTCCAGAGAATGGCTTGGTAGCGTACAAAGATGGGAAGCTATTGTGTAAGCAGAATATTCAAGGGCATCTGGGGGAGGATGTGATCCAAGACCTGATCAACTACTGTCTGAGCTACATTGCAAACATTAAACTCCCTAAGAAAAGGGGAACTTTCATTGAATTCCGAAATGGCATGTTGAATGTGTCCCCAATTGGAAGAAGCTGCAGCCAAGAAGAACGAATTGAATTCTACGAACTCGATAAAAAAGAACATATACGACAAAAGTTCGTAGCAGACCTGCGGAAGGAGTTTGCAGGGAAAGGCCTCACGTTCTCCATAGGTGGCCAAATCAGCATTGACGTCTTTCCTGAAGGATGGGATAAGCGGTATTGCCTGAGACACCTGGAACATGCTGGCTATAAGACCATTTATTTCTTTGGAGACAAGACTATGCCGGGTGGCAATGACCATGAGATCTTCACAGACCCCAGAACTGTGGGCTACACAGTGACGGCCCCCGAAGACACACGCAGGATCTGTGAGGGGCTCTTCCCTTGACCCGAGGAGTGCCGGACTGACCAACAACACTGAAAGGGGCATCTGATGATGAAAGAGAGCAGCCACCCAGAGTTACCCACCTGGGATAGAACTGAAGACTTCTGTGACATGCTCCGTCTGCAACCTGTGGTGGAGGCTGAGGCAGGAAGGAACACCACTATTCTGTCAAAGGGTTAATGTTTCTGTTTTCAAGCCAGCTTCCCCTCTGTGAGCCACAGACGACAGTGTGGCCTGCTGCCTGACAGATAGCTGACCAAGTGACAACTGATCCCACAGTTTACACTTGCACTGGCCTGGCTGGCCATCTCTATTTGCTATATCTTAAAGCCAGACTGCTTTCCTGTCACCGCAGGAGGGGAGGACAGAGGACCCAGCAAAGCAGCACCTCACTGCAGTCCTCTTTAACCCCCAGGCTGACCAACCTAGGTAGCAGACGCAGTACCTAAGGCCACAGCAGCAGGGGTGCTCTCCAGCCTCTTCTTGGAGAGTGCACGTGTGTCCTCCAGAAGCTCGGGGACAGCCTTCCAAGAACACTTCCCAGGCAGCTTCCCAGTGCCCAACCACCATATGTCTCCACTGCCCTACCCTTGGCTGCCCCTACTCTGTCCACACCCACAGCAGAATGCCAGGTCCTCACCCTGTGGCATCCTTGGGTTTTATGGCAGTGCTGTGAAGCCCACTGAAGGGACAGCACCATACCTCACTTCTCAGTCTGGTCACTTTAACCCTCAGTGTCAAAAGGGTGTCTACCCCAGGTTGGCAGAGAACTTGGCTTCCGAGAGCTGCTTTCCCCACTTGGCTCCAGTAATGCTGGAGCCCCTAGCTGTCCTGGCTGTAGCAGTTCCAAGCCAGCCCAGATGCTGTGTTCTACCTGCAGGTCCAGTGTCTCCCACTGTGCCAGGTGGACTCCAGGCCTTGCCAGTTCCTACAGTGGCTATCACAGAACCCCCCTGCCCCACTGTCTTCATTCAACTCTCCCACCTAATAAAGGGCCTCTGCTCTCCAGGCAGTACATGATTGTGGCCGAATCATACATGTATGATCTTGCTGATGGGGCAGTGTGGCTGCCCAGGTCCAAGGACTTGTGCT", true));
    sequences.insert(std::pair<std::string, bool>("ATTTCAGATACGATAGCXXACGAAGCTAGGCATAGGACTATTACCCAGTCAGATXCAGATCAGATCAGATCAGATCA", false));
    sequences.insert(std::pair<std::string, bool>("ACTGCAAAXXXAC", false));
    sequences.insert(std::pair<std::string, bool>("ACGTGCAAAXXXAC", true));
    sequences.insert(std::pair<std::string, bool>("ACTAGACTAGCATCGATCAGCTAGCTACAGCTAGCATGCATGCAGCTACTATCGATGCATGCGATGCTGATGCATGCATGCAGCGA", false));
    sequences.insert(std::pair<std::string, bool>("ATGCAAAXXADGATAGAXAC", false));